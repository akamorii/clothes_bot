from aiogram import types, Router
from aiogram.types import KeyboardButton
from aiogram.filters import Command
from handlers.keyboards import main_keyboard, main_admin_keyboard
from aiogram import F
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
from handlers.payment import make_payment, get_payment_status
from bot_instance import bot

from vars import ADMIN_ID, CHAT_ID

import time

import asyncio

from db_bot.database import db_show, select_row_from_db, select_ids_from_db, add_order_to_db, count_update_db, select_all_from_table, select_by_one_select

router = Router()
class My–ûrderState(StatesGroup):
    select_orders = State()
    select_one_order = State()
    
  
@router.message(F.text == "–º–æ–∏ –∑–∞–∫–∞–∑—ã")
async def check_my_orders(message: types.Message, state: FSMContext):
    
    sizes_and_counts = await select_all_from_table("sizes_and_counts")
    
    items = await select_all_from_table('clothes')
    
    try:
        orders = await select_by_one_select(message.from_user.id, 'user_id', 'orders')
        
    except Exception as e:
        print(e)
        await message.answer('—É –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤')
        await state.clear()
        return
    
    
    # time.sleep(2)
    # zxc = 123
    item_dict = {item[0]: item for item in items}
    sizes_dict = {size[0]: size for size in sizes_and_counts}

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
    messages = []
        
    for order in orders:
        order_id, sized_item_id, user_id, address, status, track_num = order

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—Ä–µ –∏ —Ç–æ–≤–∞—Ä–µ
        size_data = sizes_dict.get(sized_item_id)
        if not size_data:
            messages.append(f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ {order_id}: –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            continue

        size, count, item_id = size_data[1], size_data[2], size_data[3]
        item_data = item_dict.get(item_id)
        if not item_data:
            messages.append(f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ {order_id}: –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            continue

        collection, item_type, color = item_data[1], item_data[2], item_data[3]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ
        message_res = (
            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}\n"
            f"–¶–≤–µ—Ç: {color}\n"
            f"–†–∞–∑–º–µ—Ä: {size}\n"
            f"–¢–∏–ø: {item_type}\n"
            f"–ö–æ–ª–ª–µ–∫—Ü–∏—è: {collection}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–ê–¥—Ä–µ—Å: {address}\n"
            f"–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: {track_num}\n"
            # f"–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ: {count if count > 0 else '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}"
        )
        messages.append(message_res)
    try:
        # print(zxc)
        if not messages:
            raise Exception("–Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
        
    except Exception as e:
        await state.clear()
        await message.answer(str(e))
        return

    res = "–ï—Å–ª–∏ –í—ã –Ω–µ —É–≤–µ—Ä–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ @Business228777 –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏ –∞–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏. –ú—ã –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∏–º –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –∏–º–µ–Ω–Ω–æ —Ç—É–¥–∞, –∫—É–¥–∞ –í–∞–º –Ω–∞–¥–æü§ù\n\n".join(messages)
    
    await message.answer(res)


 